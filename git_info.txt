cd адрес Выбирает папку с которой нужно работать(переход в папку)
ls Просмотр файлов текущей директории

git status Сообщает о статусе файла

git add файл Добавляет файл в индекс(делает коммит возможным)
git add . Добавляет файлы всей текущей дирректории
git add -p файл Добавляет часть файла

git commit Файл отправляется в коммит
git commit -m "name" Позволяет задать коммиту названии
git commit -a Объединение коммитов в один коммит(после git reset --mixed)

git log Просмотра коммитов

git show Просмотр последнего коммита

cd адрес Переход в другую папку


git init Создает репозиторий в текущей папке

git rm --cached файл Убирает файл от отслеживания(удаление из системы)

git mv имя_файла новое_имя_файла Переименование файла

git diff номер_первого_коммита(хэш) номер_второго_коммита(хэш) Сравнение коммитов
git diff HEAD~1(номер комита начиная с последнего(1)) Показывает изменения в последнем коммите
git diff имя файла Показывает изменения произведенные в файле но не закомиченные.
git diff --name-only хеш Показывает какие файлы были измененны

ОТКАТ ИЗМЕНЕНИЙ

git checkout -- имя_файла Откат изменений в файле(изменения перестают быть видимыми для гита и удаляются)

git reset HEAD имя_файла Отправленный в индекс файл удаляется оттуда

git commit --amend Изменение последнего коммита(нужно изменить сообщение)

git revert хэш_изменяемого коммита Откатывает изменения в коммите(нужно изменить сообщение)

git reset Тоже что и git reset --mixed

git reset --hard Удаляет все внесенное в индексе или в анстейжите до последнего коммита

git reset --hard хэш_коммита_который_нужно_сохранить Удаляет все коммиты добавленные после выбранного

git reset --soft хэш_коммита Все изменения в коммитах после данного отправляются в индекс

git reset --mixed HEAD имя файла Возвращает изменения в анстейджет(не отправленный в индекс)(добавляется в код)



РЕПОЗИТОРИИ

git clone ссылка на репозиторий Клонирует удаленный репозиторий и создает его локально

git pull Загрузка изменений из гитхаба

git remote Просмотр удаленных репозиториев

git remote -v Просмотр ссылок на удаленные репозитории

git push Отправка репозитория на github
git push -u origin имя ветки Отправка ветки с указанным именем на github



ВЕТКИ

git checkout имя ветки Переключение между ветками
git checkout -b имя ветки Создание новой ветки

git branch -m старое_имя новое_имя Изменение названия ветки
git branch -l Перечисление всех веток которые есть в проекте
git branch -d имя_ветки Удаление ветки

git push --delete origin имя ветки Удаление ветки из репозитория

git diff имя_первой_ветки..имя_второй_ветки Сравнение веток
git diff имя_ветки..origin/имя_ветки Сравнение локальной ветки с веткой на удаленном сервере(после 
diff fetch) 

git fetch Скачивает ветку с удаленного сервера но не сливает ее с локальной веткой

git merge имя ветки Слияние веток
git merge --abort  Отмена последнего мерджа

ПОЛЕЗНЫЕ ИНСТРУМЕНТЫ

git stash Сохраняет незакомиченные изменения
git stash list Выводит список таких прятаний
git stash apply Последнее прятание пермещается в репозиторий
git stash pop Последние прятание выводится в анстейж

git blame имя_файла Показывает какой пользователь какие изменения сделал

git gc Приводит репозиторий в порядок(архивирует ненужные или старые файлы)

ПРАВИЛА РАБОТЫ С GIT

Ветки должны называться в соответсвии с их назначением(задача или назначение)

Нужно коммитеть лишь важные или крупные изменения в коде

Рекомендуется начинать название ветки с номера задачи

Перел тем как пушить(отправлять на гитхаб) коммит нужно сначала скачать изменения сделанные вне вашей работы

Не хранить в гит ненужные файлы

Придерживаться процесса принятого в команде(скорость разработки)

КАК СОЗДАТЬ РЕПОЗИТОРИЙ И ЗАЛИТЬ ЕГО НА GITHUB

git init
git add имя_файла(.)
git commit -m "название_комита"
git branch -M main
git remote add origin ссылка на удаленный репозиторий
git push -u origin main

Отправка на существующий репозиторий
git init
git remote add origin ссылка на удаленный репозиторий
git branch -M main
git pull --rebase origin main
Дальше все как в первом случае

При добавлении изменений в существующий репозиторий

git add 'имя_файла'
git commit -m 'название_репозитория'
git push -u origin имя ветки